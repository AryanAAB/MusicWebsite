<!--The following code contains some references from : https://www.youtube.com/watch?v=HX6AM_1-jNM-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rhythm Realm</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="icon" href="images/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <style>
        .custom-colored-btn {
            background-color: #eb03d0;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .custom-colored-btn:hover {
            background-color: #c600a8;
            color: #fff;
        }

        .custom-colored-btn:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(235, 3, 208, 0.5);
            color: #fff;
        }

        .custom-colored-btn2 {
            background-color: #ff6f00;
            color: #ffffff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
        }

        .custom-colored-btn2:hover {
            background-color: #e65c00;
            color: #ffffff;
        }

        .custom-colored-btn2:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(255, 111, 0, 0.5);
            color: #ffffff;
        }

        #video-container{
            display:grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            height: 90vh;
            width: 1400px;
            margin:0 auto;
        }

        .video-container{
            max-height: 100%;
            border: 2px solid black;
            background-color: #203A49;
        }

        .video-player{
            height: 100%;
            width: 100%;
        }

        button{
            border:none;
            background-color: cadetblue;
            color:#fff;
            padding:10px 20px;
            font-size:16px;
            margin:2px;
            cursor: pointer;
        }

        #controls{
            display: none;
            justify-content: center;
            margin-top:0.5em;
        }

        @media screen and (max-width:1400px){
            #video-container{
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                width: 95%;
            }
        }
    </style>
    <script>
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "3000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
    </script>
</head>
<body>
    <div class="content">
        <div class="header">
            <div class="logo-container">
                <a href="/profile" class="logo">
                    <img src="images/logo.jpeg" alt="Rhythm Realm" class="logoImage">
                </a>
            </div>
            <p class="music-name-profile">Rhythm Realm Meeting Room</p>
            <div id="header-middle"></div>
            <div class="header-right">
                <div class="menu-toggle" id="menuToggle">
                    <input type="checkbox" />
                    <span></span>
                    <span></span>
                    <span></span>
                    <ul id="menu">
                        <li>
                            <button id="profileButton" class="btn btn-success">
                                <i class="fas fa-user"></i> Your Profile
                            </button>
                        </li>
                        <li>
                            <button id="messagesButton" class="btn btn-warning">
                                <i class="fas fa-bell"></i> Notifications
                            </button>
                        </li>
                        <li>
                            <button id="createMusicButton" class="btn custom-colored-btn2">
                                <i class="fas fa-headphones"></i> Create Your Music
                            </button>
                        </li>
                        <li>
                            <button id="createPlayListButton" class="btn custom-colored-btn">
                                <i class="fas fa-music"></i> Create Playlist
                            </button>
                        </li>
                        <li>
                            <button id="playListButton" class="btn btn-secondary">
                                <i class="fas fa-record-vinyl"></i> View Playlists
                            </button>
                        </li>
                        <li>
                            <button id="jamButton" class="btn btn-dark">
                                <i class="fas fa-user-friends"></i> View Jam Mates
                            </button>
                        </li>
                        <li>
                            <button id="createEventButton" class="btn btn-primary">
                                <i class="fas fa-calendar-plus"></i> Create Event
                            </button>
                        </li>
                        <li>
                            <button id="viewEventsButton" class="btn btn-info">
                                <i class="fas fa-calendar"></i> View Events
                            </button>
                        </li>
                        <li>
                            <button id="logoutButton" class="btn btn-danger">
                                <i class="fas fa-running"></i> Logout
                            </button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="spinner-container" id="spinnerContainer">
            <div class="spinner"></div>
        </div>
        
        <div id="meeting-room">
            <div id="video-container"></div>

            <div id="controls">
                <button id="leave-btn">Leave Room</button>
                <button id="mic-btn">Turn Mic Off</button>
                <button id="camera-btn">Turn Camera Off</button>
            </div>
        </div>
    </div>
    <div class="footer">
        <p>&copy; 2024 Rhythm Realm. All rights reserved.</p>
    </div>
</body>
<script src="AgoraRTC_N-4.21.0.js"></script>
<script>
    const APP_ID = "<%= appid %>"
    const TOKEN = "<%= token %>"
    const CHANNEL = "<%= channel %>"
    const client = AgoraRTC.createClient({mode:'rtc', codec:'vp8'})

    let localTracks = []
    let remoteUsers = {}

    window.onload = async function() {
        document.getElementById('spinnerContainer').style.display = 'flex';

        try {
            const token = localStorage.getItem('token');
            const response = await fetch('/api/profile', {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            });

            let data = await response.json();
            if (!response.ok) {
                throw new Error('Failed to fetch profile');
            }

            try{
                await joinMeetingRoom();
            } catch(error){
                document.getElementById('spinnerContainer').style.display = 'none';
                localStorage.setItem('message', "Mic and Camera Configuration Failed.");
                window.location.href = '/profile';    
            }

            document.getElementById('spinnerContainer').style.display = 'none';
        } catch (error) {
            console.log(error);
            localStorage.setItem('failed', true);
            document.getElementById('spinnerContainer').style.display = 'none';
            window.location.href = '/';
        }
    };

    let joinAndDisplayLocalStream = async () => {

        client.on('user-published', handleUserJoined)
        
        client.on('user-left', handleUserLeft)
        
        let UID = await client.join(APP_ID, CHANNEL, TOKEN, null)

        localTracks = await AgoraRTC.createMicrophoneAndCameraTracks() 

        let player = `<div class="video-container" id="user-container-${UID}">
                            <div class="video-player" id="user-${UID}"></div>
                    </div>`
        document.getElementById('video-container').insertAdjacentHTML('beforeend', player)

        localTracks[1].play(`user-${UID}`)
        
        await client.publish([localTracks[0], localTracks[1]])
    }

    let joinMeetingRoom = async () => {
        await joinAndDisplayLocalStream()
        document.getElementById('controls').style.display = 'flex'
    }

    let handleUserJoined = async (user, mediaType) => {
        remoteUsers[user.uid] = user 
        await client.subscribe(user, mediaType)

        if (mediaType === 'video'){
            let player = document.getElementById(`user-container-${user.uid}`)
            if (player != null){
                player.remove()
            }

            player = `<div class="video-container" id="user-container-${user.uid}">
                            <div class="video-player" id="user-${user.uid}"></div> 
                    </div>`
            document.getElementById('video-container').insertAdjacentHTML('beforeend', player)

            user.videoTrack.play(`user-${user.uid}`)
        }

        if (mediaType === 'audio'){
            user.audioTrack.play()
        }
    }

    let handleUserLeft = async (user) => {
        delete remoteUsers[user.uid]
        document.getElementById(`user-container-${user.uid}`).remove()
    }

    let leaveMeetingRoom = async () => {
        for(let i = 0; localTracks.length > i; i++){
            localTracks[i].stop()
            localTracks[i].close()
        }

        await client.leave()
        document.getElementById('controls').style.display = 'none'
        document.getElementById('video-container').innerHTML = ''
        window.location.href = "/profile";
    }

    let toggleMic = async (e) => {
        if (localTracks[0].muted){
            await localTracks[0].setMuted(false)
            e.target.innerText = 'Turn Mic Off'
            e.target.style.backgroundColor = 'cadetblue'
        }else{
            await localTracks[0].setMuted(true)
            e.target.innerText = 'Turn Mic On'
            e.target.style.backgroundColor = '#EE4B2B'
        }
    }

    let toggleCamera = async (e) => {
        if(localTracks[1].muted){
            await localTracks[1].setMuted(false)
            e.target.innerText = 'Turn Camera Off'
            e.target.style.backgroundColor = 'cadetblue'
        }else{
            await localTracks[1].setMuted(true)
            e.target.innerText = 'Turn Camera On'
            e.target.style.backgroundColor = '#EE4B2B'
        }
    }

    document.getElementById('leave-btn').addEventListener('click', leaveMeetingRoom)
    document.getElementById('mic-btn').addEventListener('click', toggleMic)
    document.getElementById('camera-btn').addEventListener('click', toggleCamera)

    document.getElementById('menuToggle').addEventListener('click', function() {
        var menu = document.getElementById('menu');
        var checkbox = document.querySelector('.menu-toggle input[type="checkbox"]');
        checkbox.checked = !checkbox.checked;
        if (checkbox.checked) {
            menu.style.display = 'block';
        } else {
            menu.style.display = 'none';
        }
    });
    document.addEventListener('click', function(event) {
        var isClickInsideMenu = menu.contains(event.target);
        var isClickOnToggle = menuToggle.contains(event.target);
        if (!isClickInsideMenu && !isClickOnToggle) {
            menu.style.display = 'none';
            var checkbox = document.querySelector('.menu-toggle input[type="checkbox"]');
            checkbox.checked = false;
        }
    });
    document.getElementById('logoutButton').addEventListener('click', () => {
        localStorage.clear();
        localStorage.setItem('logout', true);
        window.location.href = '/';
    });
    document.getElementById('jamButton').addEventListener('click', () => {
        window.location.href = '/users';
    })
    document.getElementById('messagesButton').addEventListener('click', () => {
        window.location.href = '/messages';
    });
    document.getElementById('viewEventsButton').addEventListener('click', () => {
        window.location.href = '/viewEvents';
    });
    document.getElementById('profileButton').addEventListener('click', () => {
        window.location.href = '/profile';
    });
    document.getElementById('createPlayListButton').addEventListener('click', () => {
        window.location.href = '/createPlaylist';
    });
    document.getElementById('playListButton').addEventListener('click', () => {
        window.location.href = '/playlists';
    });
    document.getElementById('createMusicButton').addEventListener('click', () => {
        window.location.href = '/createMusic';
    });
    document.getElementById('createEventButton').addEventListener('click', () => {
        window.location.href = '/createEvent';
    });
</script>
</html>