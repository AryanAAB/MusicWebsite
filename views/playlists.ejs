<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rhythm Realm</title>
    <link rel="stylesheet" href="styles.css">
    <link rel="icon" href="images/favicon.ico" type="image/x-icon">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-top-right",
            "preventDuplicates": false,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "3000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };
    </script>
    <style>
        .playlist-div {
            background-color: #f0f8ff;
            border: 1px solid #d1e7ff;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .playlist-div input[type="text"],
        .playlist-div textarea {
            width: 100%;
            padding: 12px;
            margin: 12px 0;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-sizing: border-box;
            transition: border-color 0.3s;
        }
        
        .playlist-div input[type="text"]:focus,
        .playlist-div textarea:focus {
            border-color: #007bff;
        }
        
        .playlist-div textarea {
            resize: vertical;
        }
        
        .track-div {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 10px;
            padding: 15px;
            border: 1px solid #d1e7ff;
            border-radius: 8px;
            margin-bottom: 12px;
            background-color: #ffffff;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }
        
        .track-div input[type="text"] {
            flex: 1;
            padding: 10px;
            margin: 0;
            border: 1px solid #ccc;
            border-radius: 8px;
            box-sizing: border-box;
            transition: border-color 0.3s;
        }
        
        .track-div input[type="text"]:focus {
            border-color: #007bff;
        }
        
        .track-div .remove-track {
            background-color: #ffccd5;
            color: #d9534f;
            padding: 6px 12px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: bold;
            margin-left: auto;
            transition: background-color 0.3s;
        }
        
        .track-div .remove-track:hover {
            background-color: #f5c6cb;
        }
        
        .playlist-div button {
            display: inline-block;
            padding: 12px 24px;
            margin-top: 12px;
            border: none;
            border-radius: 8px;
            background-color: #007bff;
            color: #ffffff;
            cursor: pointer;
            transition: background-color 0.3s, box-shadow 0.3s;
        }
        
        .playlist-div button:hover {
            background-color: #0056b3;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }

        .no-playlists-message {
            font-size: 16px;
            color: #888;
            text-align: center;
            margin-top: 20px;
        }
        
        #playlistsContainer {
            display: flex;
            flex-direction: column;
            gap: 20px;
            margin-top: 20px;
        }

        .custom-colored-btn {
            background-color: #eb03d0;
            color: #fff;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

        .custom-colored-btn:hover {
            background-color: #c600a8;
            color: #fff;
        }

        .custom-colored-btn:focus {
            outline: none;
            box-shadow: 0 0 0 2px rgba(235, 3, 208, 0.5);
            color: #fff;
        }
    </style>
</head>
<body>
    <div class="content">
        <div class="header">
            <div class="logo-container">
                <a href="/profile" class="logo">
                    <img src="images/logo.jpeg" alt="Rhythm Realm" class="logoImage">
                </a>
            </div>
            <p class="music-name-profile">Rhythm Realm My Playlists</p>
            <div id="header-middle"></div>
            <div class="header-right">
                <div class="menu-toggle" id="menuToggle">
                    <input type="checkbox" />
                    <span></span>
                    <span></span>
                    <span></span>
                    <ul id="menu">
                        <li>
                            <button id="profileButton" class="btn btn-success">
                                <i class="fas fa-user"></i> Your Profile
                            </button>
                        </li>
                        <li>
                            <button id="messagesButton" class="btn btn-warning">
                                <i class="fas fa-bell"></i> Notifications
                            </button>
                        </li>
                        <li>
                            <button id="createMusicButton" class="btn custom-colored-btn">
                                <i class="fas fa-headphones"></i> Create Your Music
                            </button>
                        </li>
                        <li>
                            <button id="jamButton" class="btn btn-secondary">
                                <i class="fas fa-user-friends"></i> View Jam Mates
                            </button>
                        </li>
                        <li>
                            <button id="createPlayListButton" class="btn btn-dark">
                                <i class="fas fa-music"></i> Create Playlist
                            </button>
                        </li>
                        <li>
                            <button id="createEventButton" class="btn btn-primary">
                                <i class="fas fa-calendar-plus"></i> Create Event
                            </button>
                        </li>
                        <li>
                            <button id="viewEventsButton" class="btn btn-info">
                                <i class="fas fa-calendar"></i> View Events
                            </button>
                        </li>
                        <li>
                            <button id="logoutButton" class="btn btn-danger">
                                <i class="fas fa-running"></i> Logout
                            </button>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="spinner-container" id="spinnerContainer">
            <div class="spinner"></div>
        </div>
        <div id="playlistsContainer"></div>
        
        <div class="footer">
            <p>&copy; 2024 Rhythm Realm. All rights reserved.</p>
        </div>
    </div>
    <script>
        let allTrackIds = [];

        window.onload = async function () {
            loadPlaylists();
        };
        async function loadPlaylists() {
            document.getElementById('spinnerContainer').style.display = 'flex';
            allTrackIds = [];

            try {
                const token = localStorage.getItem('token');
                const response = await fetch('/api/playlists/', {
                    headers: {
                        'Authorization': `Bearer ${token}`
                    }
                });

                if (!response.ok) {
                    throw new Error('Failed to fetch playlists.');
                }

                let playlists = await response.json();

                playlistsContainer.innerHTML = '';

                if (playlists && playlists.length > 0) {
                    playlists.forEach(playlist => {
                        const playlistDiv = document.createElement('div');
                        playlistDiv.classList.add('playlist-div');
                        playlistDiv.innerHTML = `
                            <input type="text" value="${playlist.name}" class="playlist-name">
                            <textarea class="playlist-description">${playlist.description}</textarea>
                            <div class="trackContainer" id="playlist${playlist._id}">
                                ${playlist.tracks.map((track, index) => {
                                    if (track._id) {
                                        allTrackIds.push([playlist._id, track._id]);
                                    }
                                    return `
                                        <div class="track-div" id="track-${playlist._id}-${index}">
                                            <input type="text" value="${track.title}" class="track-title" placeholder="Track Title" required>
                                            <input type="text" value="${track.artist}" class="track-artist" placeholder="Artist">
                                            <input type="text" value="${track.album}" class="track-album" placeholder="Album">
                                            <input type="text" value="${track.url}" class="track-url" placeholder="Track URL">
                                            <span class="remove-track" onclick="removeTrack('${playlist._id}', ${index})">Remove</span>
                                        </div>
                                    `;
                                }).join('')}
                            </div>
                            <button onclick="addTrack('${playlist._id}')">+ Add Track</button>
                            <button onclick="updatePlaylist('${playlist._id}')">Update Playlist</button>
                        `;
                        playlistsContainer.appendChild(playlistDiv);
                    });
                } else {
                    const noPlaylistsMessage = document.createElement('div');
                    noPlaylistsMessage.classList.add('no-playlists-message');
                    noPlaylistsMessage.textContent = 'No playlists available. Add one today by visiting the Create Playlist Page!';
                    playlistsContainer.appendChild(noPlaylistsMessage);
                }  

                document.getElementById('spinnerContainer').style.display = 'none';
            } catch (error) {
                localStorage.setItem('failed', true);
                window.location.href = '/';
            }
        }

        async function updatePlaylist(playlistId) {
            const token = localStorage.getItem('token');
            try {
                document.getElementById('spinnerContainer').style.display = 'flex';
                
                const playlistDiv = document.querySelector(`#playlist${playlistId}`).parentElement;
                const name = playlistDiv.querySelector('.playlist-name').value;
                const description = playlistDiv.querySelector('.playlist-description').value;
                const trackElements = playlistDiv.querySelectorAll('.track-div');

                const trackIds = [];

                for(const trackElement of trackElements) {
                    const title = trackElement.querySelector('.track-title').value;
                    
                    if(title === ""){
                        throw new Error();
                    }
                }

                for (const trackElement of trackElements) {
                    const title = trackElement.querySelector('.track-title').value;
                    const artist = trackElement.querySelector('.track-artist').value;
                    const album = trackElement.querySelector('.track-album').value;
                    const url = trackElement.querySelector('.track-url').value;

                    const trackResponse = await fetch('/api/playlists/tracks', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${token}`
                        },
                        body: JSON.stringify({ title, artist, album, url }),
                    });

                    const track = await trackResponse.json();
                    
                    if(!trackResponse.ok)
                        throw new Error();

                    trackIds.push(track._id);
                }

                const response = await fetch(`/api/playlists/${playlistId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${token}`
                    },
                    body: JSON.stringify({ name, description, trackIds }),
                });

                const result = await response.json();
                if (response.ok) {
                    const trackIdsToRemove = allTrackIds
                        .filter(([id]) => id === playlistId)
                        .map(([, trackId]) => trackId);
                    for (const trackId of trackIdsToRemove) {
                        await fetch(`/api/playlists/tracks/${trackId}`, {
                            method: 'DELETE',
                            headers: {
                                'Authorization': `Bearer ${token}`
                            },
                        });
                    }

                    toastr.success("Playlist updated successfully!");
                    loadPlaylists();
                } else {
                    throw new Error();
                }
            } catch(error) {
                toastr.error("Error in updating the playlist. Make sure that you have at least 1 track and no empty tracks.");
                loadPlaylists();
            }
        }

        function addTrack(playlistId) {
            const trackContainer = document.querySelector(`#playlist${playlistId}`);
            const trackCount = trackContainer.children.length;
            const trackDiv = document.createElement('div');
            trackDiv.classList.add('track-div');
            trackDiv.id = `track-${playlistId}-${trackCount}`;
            trackDiv.innerHTML = `
                <input type="text" class="track-title" placeholder="Track Title" required>
                <input type="text" class="track-artist" placeholder="Artist">
                <input type="text" class="track-album" placeholder="Album">
                <input type="text" class="track-url" placeholder="Track URL">
                <span class="remove-track" onclick="removeTrack('${playlistId}', ${trackCount})">Remove</span>
            `;
            trackContainer.appendChild(trackDiv);
        }

        function removeTrack(playlistId, trackIndex) {
            const trackDiv = document.getElementById(`track-${playlistId}-${trackIndex}`);
            
            trackDiv.remove();
        }

        document.getElementById('menuToggle').addEventListener('click', function() {
                var menu = document.getElementById('menu');
                var checkbox = document.querySelector('.menu-toggle input[type="checkbox"]');
                checkbox.checked = !checkbox.checked;
                if (checkbox.checked) {
                    menu.style.display = 'block';
                } else {
                    menu.style.display = 'none';
                }
            });
            document.addEventListener('click', function(event) {
                var isClickInsideMenu = menu.contains(event.target);
                var isClickOnToggle = menuToggle.contains(event.target);
                if (!isClickInsideMenu && !isClickOnToggle) {
                    menu.style.display = 'none';
                    var checkbox = document.querySelector('.menu-toggle input[type="checkbox"]');
                    checkbox.checked = false;
                }
            });
            document.getElementById('logoutButton').addEventListener('click', () => {
                localStorage.clear();
                localStorage.setItem('logout', true);
                window.location.href = '/';
            });
            document.getElementById('jamButton').addEventListener('click', () => {
                window.location.href = '/users';
            });
            document.getElementById('messagesButton').addEventListener('click', () => {
                window.location.href = '/messages';
            });
            document.getElementById('viewEventsButton').addEventListener('click', () => {
                window.location.href = '/viewEvents';
            });
            document.getElementById('profileButton').addEventListener('click', () => {
                window.location.href = '/profile';
            });
            document.getElementById('createPlayListButton').addEventListener('click', () => {
                window.location.href = '/createPlaylist';
            });
            document.getElementById('createEventButton').addEventListener('click', () => {
                window.location.href = '/createEvent';
            });
            document.getElementById('createMusicButton').addEventListener('click', () => {
                window.location.href = '/createMusic';
            });
    </script>
</body>